input {
  # generator { message => "Hello world!" count => 10 }
  # Error - 55640f6d-a8ef-43e0-bd49-b04720326671
  # Good - 5c2b73df-3338-44bd-a96c-fad2a1b00495
  elasticsearch {
    hosts => "localhost"
    index => "anz-*"
    query => '{ "query": { "match": { "jobId": "5c2b73df-3338-44bd-a96c-fad2a1b00495" } }, "sort": [ {"@timestamp": {"order": "asc"}} ] }'
    size => 10000
    # schedule => "* * * * *"
  }
}

filter {

  # Parse message into tokens to be able to filter out
  grok {
    match => { "message" => "%{WORD:apm_first_word}" }
  }

  # Filter out unnecessary spans
  if [apm_first_word] in ["If", "Main", "VisualBasicValue<Boolean>", "VisualBasicValue", "Assign", "Switch", "Sequence", "Do"] {
    drop {}
  }

  # add mandatory apm_id field
  mutate {
    add_field => { "apm_id" => "%{jobId}" }
  }

  # 1. parse and create apm_command field for 5 states:
    # TRANSACTION_START
    # SPAN_START
    # SPAN_END
    # TRANSACTION_END
    # EXCEPTION
  # 2. Get apm_name as transaction or span name
  # 3. Get apm_timestamp
  ruby {
    code => "event.set('apm_timestamp', event.get('@timestamp'))"
  }

  if [level] == "Error" {

    mutate {
      add_field => { "apm_command" => "EXCEPTION"}
      add_field => { "apm_name" => "%{message}"}
    }

    # Add FLUSH event to purge all the spans for a given transaction
    clone {
      clones => ["clone"]
      remove_field => ["apm_command"]
      add_field => {"apm_command" => "FLUSH"}
    }

  } else
  if [message] =~ "\S execution started" {

    mutate {
      add_field => { "apm_command" => "TRANSACTION_START"}
    }

    grok {
      match => { "message" => "%{DATA:apm_name} execution started" }
    }
  } else
  if [message] =~ "\S execution ended" {

    mutate {
      add_field => { "apm_command" => "TRANSACTION_END"}
    }

    grok {
      match => { "message" => "%{DATA:apm_name} execution ended" }
    }
  } else
  if [message] =~ "\S Executing" {

    mutate {
      add_field => { "apm_command" => "SPAN_START"}
    }

    grok {
      match => { "message" => "%{DATA:apm_name} Executing" }
    }
  } else
  if [message] =~ "\S Closed" {

    mutate {
      add_field => { "apm_command" => "SPAN_END"}
    }

    grok {
      match => { "message" => "%{DATA:apm_name} Closed" }
    }
  } else
  # if [message] =~ "\S Faulted" {
  #
  #   mutate {
  #     add_field => { "apm_command" => "SPAN_END"}
  #   }
  #
  #   grok {
  #     match => { "message" => "%{DATA:apm_name} Faulted" }
  #   }
  # } else


  # Ignore everything else
  {
    drop {}
  }

  mutate {
    remove_field => "apm_first_word"
  }
}

output {
  # stdout { codec => rubydebug }
  elastic_apm_server {
     server_urls => "http://localhost:8200"
     service_name => "uipath"
     log_level => "DEBUG"
  }
}
