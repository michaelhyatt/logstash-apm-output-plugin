input {
  http {
    host => "0.0.0.0"
    port => 3131
    codec => json
  }
  # tcp {
  #   host => "0.0.0.0"
  #   port => 3131
  #   codec => json
  # }
}

filter {

  if [result] == "SUCCESS" {
    # Transaction handling

    # Cleanup
    mutate {
      rename => { "[scmInfo][branch]" => "scmInfo_branch"
                  "[scmInfo][url]" => "scmInfo_url"
                  "[scmInfo][commit]" => "scmInfo_commit" }
      remove_field => ["@timestamp", "@version", "slaveInfo", "headers", "scmInfo", "parameters"]
      join => { "buildFailureCauses" => "," }
    }

    # Create context tags
    ruby {
      code => '
        event.to_hash.each { |key, value|
          event.set("[transaction][context][tags][#{key}]", value)
          event.remove(key)
        }
      '
    }

    # Create Transaction fields
    mutate {
      add_field => {
        "[transaction][trace_id]" => "%{[transaction][context][tags][buildUrl]}"
        "[transaction][name]" => "%{[transaction][context][tags][fullJobName]}"
        "[transaction][id]" => "%{[transaction][context][tags][buildUrl]}"
        "[transaction][type]" => "other"
        "[transaction][duration]" => "%{[transaction][context][tags][duration]}"
        "[transaction][timestamp]" => "%{[transaction][context][tags][startTime]}"
        "[transaction][result]" => "%{[transaction][context][tags][result]}"
        "[transaction][span_count][started]" => "0"
      }
    }

    mutate {
      convert => {
        "[transaction][duration]" => "float"
        "[transaction][timestamp]" => "integer"
      }
    }

  } else {
    drop {}
  }
}

output {
  stdout { codec => rubydebug }
  # stdout { codec => json_lines }
  http {
    url => "http://apm_server:8200/intake/v2/events"
    http_method => "post"
    content_type => "application/x-ndjson"
    format => "message"
    message => '{"metadata": {"process": {"pid": 1234}, "system": {"container": {"id": "container-id"}, "kubernetes": {"namespace": "namespace1", "pod": {"uid": "pod-uid", "name": "pod-name"}, "node": {"name": "node-name"}}}, "service": {"name": "1234_service-12a3", "language": {"name": "ecmascript"}, "agent": {"version": "3.14.0", "name": "elastic-node"}, "framework": {"name": "emac"}}}}
{"error": {"id": "abcdef0123456789", "timestamp": 1533827045999000, "log": {"level": "custom log level","message": "Cannot read property baz of undefined"}}}
{"span": {"id": "0123456a89012345", "trace_id": "0123456789abcdef0123456789abcdef", "parent_id": "ab23456a89012345", "transaction_id": "ab23456a89012345", "parent": 1, "name": "GET /api/types", "type": "request.external", "action": "get", "start": 1.845, "duration": 3.5642981, "stacktrace": [], "context": {}}}
{"transaction": {"trace_id": "01234567890123456789abcdefabcdef", "id": "ab23456a89012345", "type": "request", "duration": 32.592981, "timestamp": 1535655207154000, "result": "200", "context": null, "spans": null, "sampled": null, "span_count": {"started": 0}}}
{"metricset": {"samples": {"go.memstats.heap.sys.bytes": {"value": 61235}}, "timestamp": 1496170422281000}}
'
  }
}
